HOST: https://github.com/sanger/lims-api

--- S2 Lims-API ---
---
Welcome to our API documentation. 

S2 API provides a JSON RESTful interface. The path to the root URL `/` only is needed to interact with the API.
All the other actions are embedded in every JSON response.
Please note that all URLs are to be considered unstable. As a consequence, you should only refer to the actions
elements returned in the response.

Please find below the different actions available in the JSON:

* `create` creates a new resource using a HTTP POST request
* `read`, `first` and `last` actions are used for pagination through HTTP GET requests
* `update` action update a resource using a HTTP PUT request
* `delete` action delete a resource using a HTTP DELETE request

In top of the above actions, more specific actions are available to interact between multiple resources.
These actions use generally HTTP POST request and are listed under the root JSON response (for example `/actions/tube_rack_transfer`).

Please note you will generally find two different URLs to create a new resource, which produce an identical result:
`/resources` or `/actions/create_resource`.
---

--
Root
--

The root JSON lists all the resources available through the API and all the actions which can be performed. 
A resource responds to all the actions listed under its `actions` elements.
Consider this URL and the JSON response like the entry point for S2 API. All the other interactions through the 
API can be performed browsing this JSON response.
GET /
> Accept: application/json
< 200
< Content-Type: application/json
{"tubes": {
    "actions": {
        "create": "/tubes",
        "read": "/tubes",
        "first": "/tubes/page=1",
        "last": "/tubes/page=-1"
    }
},
"tube_racks": {
    "actions": {
        "create": "/tube_racks",
        "read": "/tube_racks",
        "first": "/tube_racks/page=1",
        "last": "/tube_racks/page=-1"
    }
},
"create_tubes": {
    "actions": {
        "create": "/actions/create_tube"
    }
},
"create_tube_racks": {
    "actions": {
        "create": "/actions/create_tube_rack"
    }
},
"tube_rack_moves": {
    "actions": {
        "create": "/actions/tube_rack_move"
    }
},
"tube_rack_transfers": {
    "actions": {
        "create": "/actions/tube_rack_transfer"
    }
}}


--
Tube Resource
--
List actions for a tube resource.

* `create` creates a new tube via HTTP POST request
* `read` currently returns the list of actions for a tube resource via HTTP GET request
* `first` lists the first tube resources in a page browsing system
* `last` lists the last tube resources in a page browsing system
GET /tubes
> Accept: application/json
< 200
< Content-Type: application/json
{ "tubes": {
    "actions": {
        "create": "/tubes",
        "read": "/tubes",
        "first": "/tubes/page=1",
        "last": "/tubes/page=-1"
    }
} }

Create a new tube with samples. It takes in parameters an array of aliquots, assuming each aliquot is 
identified with the following informations:

* `sample_uuid` uuid of a sample
* `type` aliquot type
POST /tubes
> Accept: application/json
{ "tube": { 
    "aliquots": [
        { "sample_uuid": "11111111-2222-3333-4444-666666666666", "type": "sample" }
    ] 
} }
< 200
< Content-Type: application/json
{ "tube": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "aliquots": [
        { "sample": { 
            "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "unit": "mole",
            "type": "sample" } }
        ]
} }

Transfer the content of a source tube to a target tube.

* `source_uuid` uuid of the source tube
* `target_uuid` uuid of the target tube
* `aliquot_type` set a new type for all aliquots in the target tube
POST /actions/tube_transfer
> Accept: application/json
{ "tube_transfer": {
    "source_uuid": "11111111-2222-3333-4444-555555555555",
    "target_uuid": "11111111-2222-3333-4444-666666666666",
    "aliquot_type": "sample"
} }
< 200
< Content-Type: application/json
{ "tube_transfer": {
    "actions": {},
    "user": "user 1",
    "application": "application 1",
    "result": {
        "tube": {
            "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "aliquots": [
                { "sample": { 
                    "actions": {
                        "create": "/11111111-2222-3333-4444-777777777777",
                        "read": "/11111111-2222-3333-4444-777777777777",
                        "update": "/11111111-2222-3333-4444-777777777777",
                        "delete": "/11111111-2222-3333-4444-777777777777"
                    },
                    "unit": "mole",
                    "type": "sample" } }
            ]
        }
    },
    "source": {
        "tube": {
            "actions": {
                "create": "/11111111-2222-3333-4444-555555555555",
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555"
            },
            "uuid": "11111111-2222-3333-4444-555555555555",
            "aliquots": []
        }
    },
    "target": {
        "tube": {
            "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "aliquots": [
                { "sample": { 
                    "actions": {
                        "create": "/11111111-2222-3333-4444-777777777777",
                        "read": "/11111111-2222-3333-4444-777777777777",
                        "update": "/11111111-2222-3333-4444-777777777777",
                        "delete": "/11111111-2222-3333-4444-777777777777"
                    },
                    "unit": "mole",
                    "type": "sample" } }
            ]
        }
    }
} }


--
Tube Rack Resource
--
List actions for tube rack resource.

* `create` creates a new tube rack via HTTP POST request
* `read` currently returns the list of actions for a tube rack resource via HTTP GET request
* `first` lists the first tube rack resources in a page browsing system
* `last` lists the last tube rack resources in a page browsing system
GET /tube_racks
> Accept: application/json
< 200
< Content-Type: application/json
{ "tube_racks": {
    "actions": {
        "create": "/tube_racks",
        "read": "/tube_racks",
        "first": "/tube_racks/page=1",
        "last": "/tube_racks/page=-1"
    }
} }

Create a new tube rack and add it multiple tubes

* `number_of_rows` number of rows in the rack
* `number_of_columns` number of columns in the rack
* `tubes` map tubes identified by their uuids to rack locations
POST /tube_racks
> Accept: application/json
{ "tube_rack": {
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": "11111111-2222-3333-4444-555555555555",
        "E5": "11111111-2222-3333-4444-666666666666"
    }
} }
< 200
< Content-Type: application/json
{ "tube_rack": {
    "actions": {
        "create": "/11111111-2222-3333-4444-777777777777",
        "read": "/11111111-2222-3333-4444-777777777777",
        "update": "/11111111-2222-3333-4444-777777777777",
        "delete": "/11111111-2222-3333-4444-777777777777"
    },
    "uuid": "11111111-2222-3333-4444-777777777777",
    "number_of_rows": 8,
    "number_of_columns": 12,
    "tubes": {
        "A1": {
            "actions": {
                "create": "/11111111-2222-3333-4444-555555555555",
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555"
            }
        },
        "E5": {
            "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            }
        }
    }
} }

Transfer tubes' content from a source tube rack to a target tube rack according to a transfer map. 
As it is a content transfer between tubes in tube racks, targeted locations mentionned in the transfer map 
need to contain tubes.

* `source_uuid` uuid of the source tube rack
* `target_uuid` uuid of the target tube rack
* `transfer_map` map locations in the source tube rack to other locations in the target tube rack

POST /actions/tube_rack_transfer
> Accept: application/json
{ "tube_rack_transfer": {
    "source_uuid": "11111111-2222-3333-4444-555555555555",
    "target_uuid": "11111111-2222-3333-4444-666666666666",
    "transfer_map": { "B5": "C3" }
}}
< 200
< Content-Type: application/json
{ "tube_rack_transfer": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "number_of_rows": 8,
            "number_of_columns": 12,
            "tubes": {
                "C3": {
                    "actions": {
                        "read" => "/11111111-2222-3333-4444-777777777777",
                        "create" => "/11111111-2222-3333-4444-777777777777",
                        "update" => "/11111111-2222-3333-4444-777777777777",
                        "delete" => "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid" => "11111111-2222-3333-4444-777777777777",
                    "aliquots" => [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }        
        }
    },
    "source": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555",
                "create": "/11111111-2222-3333-4444-555555555555"
            },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {
                "B5": {
                    "actions": {
                        "read" => "/11111111-2222-3333-4444-777777777777",
                        "create" => "/11111111-2222-3333-4444-777777777777",
                        "update" => "/11111111-2222-3333-4444-777777777777",
                        "delete" => "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid" => "11111111-2222-3333-4444-777777777777",
                    "aliquots" => [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }        
        }
    },
    "target": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {
                "C3": {
                    "actions": {
                        "read" => "/11111111-2222-3333-4444-777777777777",
                        "create" => "/11111111-2222-3333-4444-777777777777",
                        "update" => "/11111111-2222-3333-4444-777777777777",
                        "delete" => "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid" => "11111111-2222-3333-4444-777777777777",
                    "aliquots" => [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }
        }
    },
    "transfer_map": { "B5": "C3" }
}}

Physically move tubes from a source tube rack to a target tube rack according to a move map.
As it physically moves tubes, targeted locations mentionned in the move map need to be empty.

* `source_uuid` uuid of the source tube rack
* `target_uuid` uuid of the target tube rack
* `move_map` map locations in the source tube rack to other locations in the target tube rack

POST /actions/tube_rack_move
> Accept: application/json
{ "tube_rack_transfer": {
    "source_uuid": "11111111-2222-3333-4444-555555555555",
    "target_uuid": "11111111-2222-3333-4444-666666666666",
    "move_map": { "B5": "C3" }
}}
< 200
< Content-Type: application/json
{ "tube_rack_transfer": {
    "actions": {},
    "user": "user",
    "application": "application",
    "result": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
            "uuid": "11111111-2222-3333-4444-666666666666",
            "number_of_rows": 8,
            "number_of_columns": 12,
            "tubes": {
                "C3": {
                    "actions": {
                        "read" => "/11111111-2222-3333-4444-777777777777",
                        "create" => "/11111111-2222-3333-4444-777777777777",
                        "update" => "/11111111-2222-3333-4444-777777777777",
                        "delete" => "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid" => "11111111-2222-3333-4444-777777777777",
                    "aliquots" => [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }        
        }
    },
    "source": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-555555555555",
                "update": "/11111111-2222-3333-4444-555555555555",
                "delete": "/11111111-2222-3333-4444-555555555555",
                "create": "/11111111-2222-3333-4444-555555555555"
            },
        "uuid": "11111111-2222-3333-4444-555555555555",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {}        
        }
    },
    "target": {
        "tube_rack": {
            "actions": {
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666",
                "create": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666",
        "number_of_rows": 8,
        "number_of_columns": 12,
        "tubes": {
                "C3": {
                    "actions": {
                        "read" => "/11111111-2222-3333-4444-777777777777",
                        "create" => "/11111111-2222-3333-4444-777777777777",
                        "update" => "/11111111-2222-3333-4444-777777777777",
                        "delete" => "/11111111-2222-3333-4444-777777777777"
                    },
                    "uuid" => "11111111-2222-3333-4444-777777777777",
                    "aliquots" => [ 
                        {"sample": {
                            "actions": {
                                "read": "/11111111-2222-3333-4444-000000000000",
                                "update": "/11111111-2222-3333-4444-000000000000",
                                "delete": "/11111111-2222-3333-4444-000000000000",
                                "create": "/11111111-2222-3333-4444-000000000000" 
                            },
                            "uuid": "11111111-2222-3333-4444-000000000000",
                            "name": "sample 1"
                        },
                        "type": "sample",
                        "unit": "mole"
                        } 
                    ]
                }
            }
        }
    },
    "move_map": { "B5": "C3" }
}}

-- 
Order Resource 
An order stores all the information needed by a pipeline to achieve works. In particular, an order has a list of 
items which are used and status. Items map a role to a resource (like a plate or a tube). A role informs how 
an item participate in the order. A status represents the progress of the order from an end-user point
of view. A status is meant to be used in order related application, not by the pipeline. Typically, when the
pipeline interacts with the order, its status should be `in_progress`. Here is the different status for an order: 

* `draft` this is the initial state on order creation
* `pending` after a `build` event. The order has been validated by the user and is ready to be used
* `in_progress` after a `start` event. The order has been started, it belongs to a pipeline and works are in progress
* `completed` after a `complete` event. The order has been fulfilled with success. The order cannot be modified.
* `cancelled` after a `cancel` event. The order has been cancelled by the user. The order cannot be modified.
* `failed` after a `fail` event. The order cannot be completed for some reason. The order cannot be modified.

On top of that, each item in an order gets a status which represent its progress. It can be one of the following: 

* `pending` which is the initial state of an item or after a `reset` event.
* `in_progress` after a `start` event. Some work are on-going using the item.
* `done` after a `complete` event. The item is available to be used in a new pipeline step.
* `cancelled` after a `cancel` event. The item has been cancelled by the user.
* `failed` after a `fail` event. The item cannot be done for some reason.

--
List actions for order resource.

* `create` creates a new order via HTTP POST request
* `read` returns the list of actions for an order resource via HTTP GET request
* `first` lists the first order resources in a page browsing system
* `last` lists the last order resources in a page browsing system
GET /orders
> Accept: application/json
< 200
< Content-Type: application/json
{ "orders": {
    "actions": {
        "create": "/orders",
        "read": "/orders",
        "first": "/orders/page=1",
        "last": "/orders/page=-1"
    }
} }

Create a new order.

* `study_uuid` uuid of an existing study
* `user_uuid` uuid of the order's creator
* `pipeline` pipeline name
* `cost_code` 
* `sources` map an asset (plate, tube...) uuid to a role. All the items in sources get a `done` status on order creation
* `targets` map an asset (plate, tube...) uuid to a role. All the items in targets get a `pending` status on order creation
POST /orders
> Accept: application/json
{ "order": {
    "study_uuid": "11111111-2222-3333-4444-555555555555",
    "user_uuid": "11111111-2222-3333-4444-666666666666",
    "pipeline": "pipeline 1",
    "cost_code": "cost code 1",
    "sources": {
        "Stock Plate 1": "11111111-2222-3333-4444-666666666666"
    },
    "targets": {
        "Tube 1": "11111111-2222-3333-4444-777777777777"
    }
} }
< 200
< Content-Type: application/json
{ "order": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "creator": {
        "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666"
    },
    "study": {
        "actions": {
            "create": "/11111111-2222-3333-4444-777777777777",
            "read": "/11111111-2222-3333-4444-777777777777",
            "update": "/11111111-2222-3333-4444-777777777777",
            "delete": "/11111111-2222-3333-4444-777777777777"
        },
        "uuid": "11111111-2222-3333-4444-777777777777"
    },
    "pipeline": "pipeline 1",
    "cost_code": "cost code 1",
    "status": "draft",
    "parameters": {},
    "state": {},
    "items": {
        "Stock Plate 1": {
            "status": "done",
            "uuid": "11111111-2222-3333-4444-888888888888"
        },
        "Tube 1": {
            "status": "pending",
            "uuid": "11111111-2222-3333-4444-999999999999"
        }
    }
} }

Update an order.

* `items` maps an asset (plate, tube...) uuid to a role. The item gets the status associated to its `event` parameter.
* `event` updates the order status.
* `pipeline` updates the pipeline parameter
* `study_uuid` updates the study parameter
* `creator_uuid` updates the creator parameter
* `cost_code` updates the cost_code parameter
* `parameters` updates the parameters attribute
* `state` updates the state parameter
PUT /{order_uuid}
> Accept: application/json
{ "items": { 
    "New tube": {
        "event": "start",
        "uuid": "11111111-0000-0000-0000-111111111111"
    }
},
"event": "build",
"pipeline": "pipeline 2",
"study_uuid": "11111111-2222-3333-4444-777777777777",
"user_uuid": "11111111-2222-3333-4444-666666666666",
"cost_code": "cost code 2",
"parameters": {"param_1": "custom parameter"},
"state": {"state_1": "information about order state"}
}
< 200
< Content-Type: application/json
{ "order": {
    "actions": {
        "create": "/11111111-2222-3333-4444-555555555555",
        "read": "/11111111-2222-3333-4444-555555555555",
        "update": "/11111111-2222-3333-4444-555555555555",
        "delete": "/11111111-2222-3333-4444-555555555555"
    },
    "uuid": "11111111-2222-3333-4444-555555555555",
    "creator": {
        "actions": {
                "create": "/11111111-2222-3333-4444-666666666666",
                "read": "/11111111-2222-3333-4444-666666666666",
                "update": "/11111111-2222-3333-4444-666666666666",
                "delete": "/11111111-2222-3333-4444-666666666666"
            },
        "uuid": "11111111-2222-3333-4444-666666666666"
    },
    "study": {
        "actions": {
            "create": "/11111111-2222-3333-4444-777777777777",
            "read": "/11111111-2222-3333-4444-777777777777",
            "update": "/11111111-2222-3333-4444-777777777777",
            "delete": "/11111111-2222-3333-4444-777777777777"
        },
        "uuid": "11111111-2222-3333-4444-777777777777"
    },
    "pipeline": "pipeline 2",
    "cost_code": "cost code 2",
    "status": "pending",
    "parameters": {"param_1": "custom parameter"},
    "state": {"state_1": "information about order state"},
    "items": {
        "Stock Plate 1": {
            "status": "done",
            "uuid": "11111111-2222-3333-4444-888888888888"
        },
        "New Tube": {
            "status": "in_progress",
            "uuid": "11111111-0000-0000-0000-111111111111"
        },
        "Tube 1": {
            "status": "pending",
            "uuid": "11111111-2222-3333-4444-999999999999"
        }
    }
} }
